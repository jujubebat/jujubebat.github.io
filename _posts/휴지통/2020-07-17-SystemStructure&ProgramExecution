---
title:  "[Operating System] System Structure & Program Execution"
excerpt: "[Operating System] System Structure & Program Execution"
toc: true
toc_sticky: true
categories:
  - cs
tags:
  - Operating System
---

# 📝System Structure & Program Execution

## 📌 컴퓨터 시스템 구조
* **CPU** 

  * 매 CPU 클럭(Clock)마다 메모리에서 명령어(Instruction, 기계어)를 읽어서 실행한다.
  * CPU 안에는 메모리보다 더 빠르게 정보를 저장하는 레지스터가 존재한다.
  * CPU를 사용하는 주체가 OS인지 사용자 프로세스인지 표시하는 mode bit가 있다.

* **Memory**

  * CPU의 작업 공간이다.

* **I/O Device**

  * 입출력을 담당하는 장치다.
  * 각 I/O Device에는 작은 CPU가 존재하는데, 이를 Device Controller라고 부른다.
  * 또한 컴퓨터 CPU의 작업공간인 메모리처럼 Device Controller의 작업 공간이 존재하는데, 이를 Local Buffer라고 한다.
  * 컴퓨터 CPU와 I/O Device의 성능 차이는 매우 크다. CPU에 비해 Dist는 백만배 정도 느리다. 
  * 컴퓨터 CPU는 I/O Device에 직접 접근할 수 없다.

* **DMA**

  * DMA는 메모리에 직접 접근할 수 있는 Controller 이다.
  * I/O 장치가 너무 많이 인터럽트를 걸면 CPU의 효율이 떨어진다.
  * 따라서 DMA는 I/O 작업의 결과물을 메모리에 직접 반영하고 CPU에게 인터럽트를 걸어서 I/O 작업 완료를 알린다.
  * CPU와 DMA는 동일 메모리 영역을 접근할 수 있는데, 충돌이 나지 않게 Memory Controller가 조율한다.


## 📌 Mode bit

* 사용자 프로그램의 잘못된 수행으로 다른 프로그램 및 운영체제에 피해가 가지 않도록 하기 위한 보호장치
* Mode bit를 통해 하드웨어적으로 두 가지 모드의 operation을 지원한다.

  * `Mode bit 1 (유저 모드)` : 사용자 프로그램 수행

  * `Mode bit 0 (커널 모드)` : OS 코드 수행

    * 보안을 해칠 수 있는 중요한 명령어는 커널 모드에서만 수행 가능하다.
* Interrupt 또는 Exception 발생, 유저 모드에서 시스템 콜 호출 시 하드웨어가 mode bit를 0으로 바꾼다.
* 사용자 프로그램에게 CPU를 넘기기 전에 mode bit를 1로 바꾼다.

##  📌 Timer

* 정해진 시간이 흐른 뒤 운영체제에게 제어권이 넘어가도록 인터럽트를 발생시킨다.
* 타이머는 매 클럭마다 1씩 감소한다.
* 타이머 값이 0이 되면 타이머 인터럽트가 발생한다.
* CPU를 특정 프로그램이 독점하는 것을 막는다.
* 타이머는 Time sharing을 구현하기 위해 널리 사용된다. 

## 📌 Device Controller, Device Driver

* **Device Controller**
  * 는 I/O 장치를 관리하는 일종의 작은 CPU이다.
  * 제어 정보를 위해 control register, status register를 가진다.
  * local buffer를 가진다. (일종의  data register)
  * I/O는 실제 device와 local buffer 사이에서 일어난다.
  * Device controller는 I/O가 끝났을 경우 interrupt로 CPU에 그 사실을 알린다.
  * Device Controller는 장치제어기로서 각 장치를 통제하는 일종의 작은 CPU이다.(하드웨어)
  * Device Controller는 device의 펌웨어 코드를 실행 시킨다.
* **Device Driver** 
  * 장치구동기로서 OS 코드 중 각 장치별 처리 루틴이다. (소프트웨어)
  * 각 I/O Device를 Control 위한 Device의 Interface를 구현한 OS 코드이다.
  * I/O Device에 접근하기 위해서는 Device drive를 설치해야한다. 

## 📌 System Call

* 사용자 프로그램이 운영체제의 서비스를 받기 위해 커널 함수를 호출하는 것이다.

## 📌 I/O 수행

- 사용자 프로그램은 운영체제에게 시스템 콜을 통해 I/O를 요청하여 I/O 작업을 수행할 수 있다.

## 📌 폴링(polling)

* 폴링은 CPU가 자신과 연결 된 입출력 장치에서 무슨 일이 있는지를 주기적으로 확인하는 방식이다.

## 📌 Interrupt (인터럽트)

- CPU가 프로그램을 실행하고 있을때, 입출력 하드웨어 등의 장치 처리 또는 예외 상황이 발생하여 처리가 필요한 경우 CPU에게 알려서 처리할 수 있도록 하는 것을 말한다. 
- 인터럽트 당한 시점의 레지스터 값과 program counter를 저장한후 CPU의 제어를 인터러트 처리 루틴에게 넘긴다.
- Interrupt (넓은 의미)
  - Interrupt (하드웨어 인터럽트) : 하드웨어가 발생시킨 인터럽트
  - trap (소프트웨어 인터럽트) 
    - Exception : 프로그램이 오류를 범한 경우
    - System Call : 프로그램이 커널 함수를 호출하는 경우
- 인터럽트 처리 루틴(인터럽트 핸들러) : 해당 인터럽트를 처리하는 커널 함수
- 인터럽트 벡터 : 해당 인터럽트의 처리 루틴 주소를 가지고 있는 일종의 테이블이다.

## 📌 동기식 입출력과 비동기식 입출력

* 동기식 입출력(Synchronous I/O)
  * I/O 요청 후 입출력 작업이 완료된 후에 제어가 사용자 프로그램에 넘어간다.
* 비동기식 입출력(Aynchronous I/O)
  * I/O가 시작된 후 입출력 작업이 끝나기를 기다리지 않고 제어가 사용자 프로그램에 즉시 넘어간다.

## 📌 저장장치 계층 구조
![](../../../assets/images/2020-07-17-15-04-45.png)

<br>

# 🔎 출처 & 더 알아보기 

  * [컴퓨터의 메모리 계층 구조와 레지스터 파일](http://arkainoh.blogspot.com/2016/10/memory.hierarchy.and.register.file.html)

  * [KOCW 운영체제-반효경](http://www.kocw.net/home/search/kemView.do?kemId=1046323)

    


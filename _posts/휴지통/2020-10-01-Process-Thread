---
title:  "[Operating System] Operating System Introduction"
excerpt: "[Operating System] Deadlock 정리"
toc: true
toc_sticky: true
categories:
  - cs
tags:
  - Operating System
---

# 📝DeadLock

## 핵심 요약

`"Deadlock은 일련의 프로세스들이 서로가 가진 자원을 기다리며 block된 상태를 말한다."`



## 📌 The Deadlock Problem

![img](https://i.stack.imgur.com/DDuIL.png)

* 프로세스 P1과 P2는 작업을 완료하기 위해 자원 R1, R2가 모두 필요하다.
* 프로세스 P1은 자원 R1을 할당 받고 있으면서, 자원 R2를 요청한다.
* 프로세스 P2는 자원 R2를 할당 받고 있으면서, 자원 R1을 요청한다.
* 프로세스 P1, P2는 서로가 가진 자원을 기다리며 무한대기 한다. 이를 Deadlock 이라고 한다. 



## 📌 Deadlock 발생의 4가지 조건

* Mutual Exclusion, No preemption, Hold and wait, Circular wait 4가지 조건을 모두 만족해야 Deadlock이 발생한다.



### Mutual Exclusion (상호 배제)

* 매 순간 하나의 프로세스만이 자원을 사용할 수 있다.

  

### No preemption (비선점)

* 프로세스는 자원을 스스로 내어놓을 뿐 빼앗기지 않는다.

  

### Hold and wait (점유대기)

* 자원을 가진 프로세스가 다른 자원을 기다릴 때 보유 자원을 놓지 않고 계속 가지고 있다

  

### Circular wait (환형대기)

* 자원을 기다리는 프로세스간에 서로가 가진 자원을 요청하는 사이클이 형성 된다.



## 📌 Deadlock 처리 방법 4가지

* Deadlock Prevention과  Deadlock Avoidance는 Deadlock을 사전에 방지하는 방법이다.
* Deadlock Detection and recovery와 Deadlock lgnorance는 Deadlock 상황을 허용하고, Deadlock이 발생한 후에 후속 처리하는 방법이다.



### 1️⃣ Deadlock Prevention (데드락 예방)

* 데드락 예방은 데드락 발생조건을 위배하여 데드락 발생을 방지하는 것이다.

* 데드락을 원천적으로 막을 수 있지만, 자원 이용률이 낮아지고, Starvation이 발생할 수 있다.

  

#### Mutual Exclusion(상호 배제) 조건 위배

* 동시에 다수의 프로세스가 공유 자원을 이용할 수 있도록 하면, 데드락은 발생하지 않는다.
* 하지만 다수의 프로세스가 동시에 공유 자원을 사용할 수 없는 상황을 가정해야한다. 따라서  Mutual Exclusion 조건은 위배할 수 없다.

#### No preemption (비선점) 조건 위배 

* 다른 프로세스가 보유하고 있는 자원을 선점할 수 있으면, Deadlock을 막을 수 있다. 

  

#### Hold and wait (점유대기) 조건 위배

* 프로세스가 어떤 자원을 소유하면서 다른 자원을 요청하는 것을 막는다.

* 프로세스 시작시 필요한 모든 자원을 할당받게 하거나, 자원이 필요할 경우 보유 자원을 모두 내놓고 다시 요청하도록 한다.

  

#### Circular wait (환형대기) 조건 위배

* 모든 자원에 할당 순서를 정하여 정해진 순서대로 자원을 할당한다.
* 자원 R1, R2를 모두 얻으려면 R1, R2순으로 얻어야한다. 이렇게 하면 R2를 가지고 있으면서 R1을 요청하는 상황이 발생하지 않는다.



### 2️⃣ Deadlock Avoidance (데드락 회피)

* 데드락 회피는 데드락이 발생하지 않도록 보수적으로 자원을 할당하는 것이다.

*  DeadLock Avoidance에서는 프로세스가 시작될 때, 최대한으로 사용할 모든 자원을 선언한다. 즉, 프로세스의 최대 자원 요구량을 알 수 있다.
* 어떤 프로세스가 자원을 요청하면, 그 프로세스가 요청할 수 있는 최대 자원 요구량보다 현재 가용 자원량이 많을 경우에만 자원을 할당한다. 
* Resource Allocation Graph Alogorithm  또는 Banker's Algorithm을 사용한다. 
* 데드락 회피는 보수적으로 자원을 할당하기 때문에 비효율적이다.



### 3️⃣ Deadlock Detection and recovery (데드락 발견과 회복)

* 데드락 발견은 데드락 발생을 허용하고, 데드락이 발생하면 처리하는 방법이다.
* 자원할당 그래프 또는 Banker's algorithm과 유사한 방법을 활용하여 데드락을 발견한다.
* 데드락이 발견되면 데드락에 연루된 모든 프로세스를 종료시키거나, 하나씩 프로세스를 종료시켜 본다.
* 데드락을 발견하는 로직에서 시스템 오버헤드가 존재하는 단점이 있다.



### 4️⃣ Deadlock lgnorance (데드락 무시)

* 데드락 무시는 데드락이 발생하면 아무것도 하지 않는다. 사용자가 알아서 Deadlock을 처리하는 방식이다.
* 현재 대부분의 운영체제들이 채택하는 방법이다.
* 사실 데드락은 자주 발생하는 상황이 아니다.



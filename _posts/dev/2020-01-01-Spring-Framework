---
title:  "[Development] Spring Framwork"
excerpt: "[Development] Spring Framwork 정리"
toc: true
toc_sticky: true
categories:
  - dev
tags:
  - Development
---

<br>

# 📝 Spring Framework

- 스프링은 [자바 엔터프라이즈](https://ko.wikipedia.org/wiki/%EC%9E%90%EB%B0%94_%ED%94%8C%EB%9E%AB%ED%8F%BC,_%EC%97%94%ED%84%B0%ED%94%84%EB%9D%BC%EC%9D%B4%EC%A6%88_%EC%97%90%EB%94%94%EC%85%98) 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 [프레임워크](https://ko.wikipedia.org/wiki/%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98_%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC)다.
- Spring은 Spring Triangle이라고 부르는 세 가지 개념을 제공해준다. 각각 IoC, AOP, PSA를 일컫는다.

<br>

## 1. Spring IoC/DI 컨테이너 

- Ioc/DI를 사용하면 객체를 생성할 때, 해당 객체가 참조하고 있는 다른 객체에 대한 종속성을 애플리케이션 코드 외부(컨테이너)에 설정하게 함으로써 [결합도](https://ko.wikipedia.org/wiki/%EA%B2%B0%ED%95%A9%EB%8F%84)는 낮추면서 유연성과 확장성을 향상 시킬 수 있다.
  - 소프트웨어 공학에서 결합도(coupling) 또는 의존도는 어떤 모듈이 다른 모듈에 의존하는 정도를 나타내는 것이다. (결합도는 보통 응집도(cohesion)와 대비 된다.)
  - 낮은 결합도는 구조화가 잘 된 컴퓨터 시스템의 지표이며, 좋은 설계이다.
  - 낮은 결합도와 높은 응집도를 겸비하면 높은 가독성과 유지 보수성이라는 목표를 이루게 된다. 

### 컨테이너(Container)

- 컨테이너는 인스턴스의 생명주기를 관리하며, 생성된 인스턴스에게 추가적인 기능을 제공한다.
- 예를들어, [서블릿](https://ko.wikipedia.org/wiki/%EC%9E%90%EB%B0%94_%EC%84%9C%EB%B8%94%EB%A6%BF)을 실행해주는 WAS는 서블릿 컨테이너를 가지고 있다고 말한다.
- WAS는 웹 브라우저로부터 서블릿 URL에 해당하는 요청을 받으면, 서블릿을 메모리에 올린 후 실행한다.
- 개발자가 서블릿 클래스를 작성 했지만, 실제로 메모리에 올리고 실행하는 것은 WAS의 서블릿 컨테이너다.
- 서블릿 컨테이너는 동일한 서블릿에 해당하는 요청을 받으면, 기존에 메모리에 올라간 서블릿을 실행하여 그 결과를 웹 브라우저에게 전달한다.

### IoC (Inversion of Control, 제어의 역전)

- 프로그래머가 작성한 코드가 객체를 제어하는 것이 아니라, 컨테이너가 제어하는 것을 말한다.
- 예를들어 서블릿 클래스는 개발자가 만들지만 그 서블릿의 메소드를 알맞게 호출하는 것은 WAS이다.
- 이렇게 개발자가 만든 어떤 클래스나 메소드를 다른 프로그램이 대신 실행해주는 것을 제어의 역전이라고 한다.

### DI**(Dependency Injection, 의존성 주입)**

- 클래스 사이의 의존 관계를 빈(Bean) 설정 정보를 바탕으로 컨테이너가 자동으로 연결해주는 것을 말한다.

#### DI가 적용되지 않은 경우
![](../../assets/images/2020-09-19-10-54-46.png)
- 자동차 인스턴스는 엔진 인스턴스를 사용하기 위해 엔진 인스턴스를 직접 생성한다.

``` java
class 엔진 {

}

class 자동차 {
     엔진 v5 = new 엔진();
}
```



#### Spring에서 DI가 적용된 경우
![](../../assets/images/2020-09-19-10-57-03.png)


- 자동차의 엔진 v5 변수에 인스턴스를 직접 생성하여 할당하지 않는다.
- 스프링 컨테이너가 v5 변수에 인스턴스를 할당(주입)해준다. 

```java
@Component
class 엔진 {

}

@Component
class 자동차 {
     @Autowired
     엔진 v5;
}
```

<br>

## 2. AOP(Aspect-Oriented Progarmming, 관점 지향 프로그래밍)

- AOP란 애플리케이션 전체에 걸쳐 사용되는 기능을 재사용하도록 지원하는 것 이다.

- 관점 지향 프로그래밍이란 프로젝트 구조를 바라보는 관점을 바꿔보자는 의미다.

- 핵심 기능 관점과 부가 기능 관점을 그림으로 살펴보자.
![](../../assets/images/2020-09-19-13-06-32.png)

- 각각의 서비스를 핵기능 관점으로 보았을 때는 공통된 요소가 없다.
![](../../assets/images/2020-09-19-13-07-49.png)
- 각각의 서비스를 부가기능 관점으로 보았을 때는 before과 after라는 메서드가 공통된 요소로 보인다.
- 즉, AOP는 OOP 관점과 다른 부가기능적인 관점으로 보았을 때 공통된 요소를 추출하여 재사용하는 기법이다. 
  - OOP : 비지니스 로직의 모듈화
    - 모듈화의 핵싱 단위는 비지니스 로직
  - AOP : 인프라 혹은 부가기능의 모듈화
    - 대표적 예 : 로깅, 트랜잭션, 보안 등
    - 각각의 모듈들의 주 목적 외에 필요한 부가적인 기능들
- OOP에서 공통된 기능을 재사용하는 방법으로 상속이나 위임을 사용한다. 
- 하지만 전체 애플리케이션 여기저기에서 사용되는 부가기능들을 상속이나 위임으로 처리하기 위해 깔끔하게 모듈화하기 어렵다.
- 그래서 AOP가 등장한 것이다. AOP의 장점은 아래와 같다.
  - 애플리케이션 전체에 흩어진 공통 기능을 하나의 장소에서 관리할 수 있다.
  - 다른 서비스 모듈들이 본인의 목적에만 충실하고 그 외 사항들은 신경쓰지 않아도 된다. 
- AOP 용어
  - 타겟(Target) : 부가 기능을 부여할 대상을 의미한다.

  - 애스팩트(Aspect) : 부가 기능 모듈을 애스펙트라고 부른다. 핵심기능에 부가되어 의미를 갖는 특별한 모듈이다. 애스팩트는 어드바이스와 포인트컷을 갖고 있다.

  - 어드바이스(Advice) : 부가 기능을 정의한 구현체이다. 타겟에 종속되지 않기 때문에 순순하게 부가기능에만 집중할 수 있다. 어드바이스는 애스팩트가 '무엇'을 '언제'할지를 정의하고 있다.

  - 포인트컷(PointCut) : 부가기능이 적용될 대상(메소드)를 선정하는 방법이다. 어드바이스를 적용할 조인포인트를 선별하는 기능을 정의한 모듈이다.

  - 조인 포인트(JoinPoint) : 어드바이스가 적용될 수 있는 위치를 얘기한다. 스프링에서 조인포인트는 무조건 메소드 단위로 지정된다.

  - 프록시(Proxy) : Spring AOP는 프록시 패턴이라는 디자인 패턴을 사용한다. 호출자가 타겟을 호출하게 되면 타겟이 아닌 타겟을 감싸고 있는 프록시가 호출되어, 타겟 메소드 실행전 후에 어드바이스에 등록된 기능을 수행 한다.

    ![](../../assets/images/2020-09-19-13-43-53.png)

  - 인트로덕션(Introduction) : 타겟 클래스에 코드 변경 없이 신규 메소드나 멤버 변수를 추가하는 기능을 얘기한다.

  - 위빙(Weaving) : 지정된 객체에 애스팩트를 적용해서 새로운 프록시 객체를 생성하는 과정을 얘기한다. 예를들어 A하는 객체에 트랜잭션 애스팩트가 지정되어 있다면, A라는 객체가 실행되기 전 커넥션을 오픈하고 실행이 끝나면 커넥션을 종료하는 기능이 추가된 프록시 객체가 생성되고 이 프록시 객체는 앞으로 A 객체가 호출되는 시점에 사용된다. 이 때 프록시객체가 생성되는 과정이 위빙이다. 

<br>

## 3. Spring PSA(Portable Service Abstraction)

- PSA는 환경의 변화와 관계없이 일관된 방식의 기술 접근 환경을 제공하는 추상화 구조다.

### Example 1 : Spring Web MVC

- @Controller, @GetMapping, @PostMapping과 같은 애노테이션을 사용하면,
- 프로그래머는 서블릿을 직접 만들지 않고, HTTP 요청을 처리하는 Controller를 만들 수 있다. 
- 이렇게 간편하게 개발할 수 있는 이유는 스프링이 추상화된 기술을 제공하기 때문이다. 
- 또한 위와 같은 코드로 만들어진 Controller는 tomcat 뿐만 아니라 netty 기반에서도 동작할 수 있다. 
- 스프링이 Portable한 추상화 서비스를 제공하기 때문이다.

### Example 2 : Spring Transaction Manager

- 어떤 비즈니스 로직에 대해 Low level로 트랜잭션 처리를 하려면 setAutoCommit()과 commit(), rollback()을 명시적으로 작성해야한다.
- 하지만 스프링이 제공하는 @Transactional 애노테이션을 사용하면, 단순히 메소드에 애노테이션을 붙여줌으로써 트랜잭션 처리를 할 수 있다. 스프링이 추상화된 계층에서 처리해주기 때문이다.
- 또한 데이터베이스 작업 처리 방법으로 Spring JDBC를 쓰거나 Spring JPA를 써도 똑같이 @Transactional 애노테이션을 사용해서 트랜잭션 처리를 할 수 있다. Portable한 것이다.

### Example 3 : Spring Cache Manager

- @Cacheable, @CacheEvict와 같은 애노테이션을 사용하여 캐쉬 처리를 할 수 있다.
- 구현체로 javax.cache, ehcache 등을 사용할 수 있다. (Potable)

# 📝 Spring Boot

# 📝 Spring MVC

# 📝 Spring JDBC

# 📝 Spring JPA



<br>



# 🔎 출처 & 더 알아보기

* [부스트코스 - 웹 프로그래밍](https://www.edwith.org/boostcourse-web/joinLectures/12956)
* [AOP 정리](https://jojoldu.tistory.com/71?category=635883)
* [예제로 배우는 스프링 입문](https://www.inflearn.com/course/spring_revised_edition/lecture/19744?tab=curriculum)
* [스프링 PSA](https://atoz-develop.tistory.com/entry/Spring-%EC%8A%A4%ED%94%84%EB%A7%81-PSA)